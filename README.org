#+STARTUP: content
#+TITLE: boot-figwheel
#+AUTHOR: aJchemist
#+UPDATE: Sun Apr 10 09:33:46 2016
#+LINK: Boot           https://github.com/boot-clj/boot
#+LINK: boot-cljs-repl https://github.com/adzerk-oss/boot-cljs-repl
#+LINK: Fiwheel        https://github.com/bhauman/lein-figwheel

[[https://clojars.org/ajchemist/boot-figwheel][https://img.shields.io/clojars/v/ajchemist/boot-figwheel.svg]]
[[https://jarkeeper.com/ajchemist/boot-figwheel][https://jarkeeper.com/ajchemist/boot-figwheel/downloads.svg]]
[[https://jarkeeper.com/ajchemist/boot-figwheel][https://jarkeeper.com/ajchemist/boot-figwheel/status.svg]]

[[Fiwheel]] interface for [[Boot]] repl.

boot-figwheel currently intend to provide same api that exist in [[https://github.com/bhauman/lein-figwheel/blob/master/sidecar/src/figwheel_sidecar/repl_api.clj][figwheel-sidecar.repl-api]].

** Dependencies

#+begin_src clojure
  [ajchemist/boot-figwheel "0.5.2-2"] ;; latest release
  [org.clojure/tools.nrepl "0.2.12" :scope "test"]
  [com.cemerick/piggieback "0.2.1" :scope "test"]
  [figwheel-sidecar "0.5.2" :scope "test"]
#+end_src

*NOTE*: Version 0.5.0 changed how the REPL dependencies are handled. For now user is required to add dependencies to one's project which are necessary libraries. =figwheel= task will print the required dependecies when run. This change related to [[https://github.com/adzerk-oss/boot-cljs-repl/commit/e05d587240a46067633362f8aa0164ea8ed61f52][this]].

** Usage

#+name: require
#+begin_src clojure
  (require 'boot-figwheel)
  (refer 'boot-figwheel :rename '{cljs-repl fw-cljs-repl}) ; avoid some symbols
#+end_src

#+begin_src clojure
  (task-options!
   figwheel {:build-ids  ["dev"]
             :all-builds [{:id "dev"
                           :compiler {:main 'app.core
                                      :output-to "app.js"}
                           :figwheel {:build-id  "dev"
                                      :on-jsload 'app.core/main
                                      :heads-up-display true
                                      :autoload true
                                      :debug false}}]
             :figwheel-options {:repl true
                                :http-server-root "target"
                                :css-dirs ["target"]
                                :open-file-command "emacsclient"}})
#+end_src

When you need to change your cljsbuild config on live, just eval =(task-options! :figwheel {...})= at the time, and restart figwheel.

#+begin_src clojure
  (deftask dev []
    (set-env! :source-paths #(into % ["src"]))
    (comp (repl) (figwheel)))
#+end_src

=figwheel= task injects =:source-paths= environment to your figwheel =all-builds= configuration. And it also checks build =:output-to= so that the build output locate in =:target-path= environment.

After dev repl is fired, ordinary dev routines follow.
#+begin_src clojure
  boot.user> (start-figwheel!)
  boot.user> (start-autobuild)
  boot.user> (stop-autobuild)
  boot.user> (fw-cljs-repl)
  cljs.core> (fig-status)
  cljs.core> :cljs/quit
  ...
  boot.user> (task-options! :figwheel {...})
  ...
  boot.user> (stop-figwheel!)
  boot.user> (start-figwheel!)
#+end_src

** Limitation

Figwheel has own fileset watcher. It can't be cooperated with boot-clj =watch= task. So if you want to use features like figwheel css live reloading, etc; you have to edit a file in =:target-path= directly

Personally I recommend [[https://github.com/noprompt/garden][garden]] to spit a compiled css file in a dev repl.

** Change

*** 0.5.0-2
- Both =:output-to= and =:output-dir= would be prefixed with =:target-path= whether they are specified or not.
- Parent of =:output-dir= would be the same as the parent of =:output-to= unless =:output-dir= is specifed.
- =:asset-path= would be prefixed with =:target-path= only if it's not specified. (thx [[https://github.com/kalouantonis][Antonis Kalou]] PR #2)

*** 0.5.0
- [ BREAKING ] Figwheel has changed a lot since =0.5.0= release. So boot-figwheel have had to adapt to it. Now boot-figwheel doesn't make another pod for =figwheel= and =figwheel= runs on the same pod where your app runs. But figwheel-sidecar is only required when current boot task is  compose of =figwheel= task.

** License

Copyright Â© 2015-2016 aJchemist

Licensed under Eclipse Public License.
